v 0.6.2 (06/03/19)
-Sauvegarde des réglages de chaque module dans le patch qui le contient (modalité savestate pd 0.49)
v 0.6.1 (27/11/18)
-Restructuration des dossiers de la racine du projet
pdr/core, pdr/modules, pdr/tutorials, pdr/medias pdr/recordings
-Possibilité de jouer simultanément plusieurs sessions PdRacks avec des contrôles de présets indépendants
-amélioration de l'outil [pdr] et de la gestion des sets (collections) de modules
v 0.6
-Changement de nom dans le repo git : PdRacks
-structuration des dossiers de la racine du projet : ressources, medias, recordings, tutorial, extensions
-nouveaux outils : [pdr] outil d'autocomplétion et d'autodéclaration de l'environnement PdRacks
-Création d'un tutoriel

v 0.5.3
- Réécriture des modules pour pouvoir les utiliser en autonome (statique) ou en mode rack.
- nettoyage des modules existants
- nouveaux modules
	- inst_modular, permettant de charger dynamiquement un patch modulaire (par exemple AUTOMATONISM_1.1), et de gérer l'interface entre signaux CV et messages midi ctl, dans les deux sens.
	- note_16steps, mini séquenceur inspiré de celui fourni par AUTOMATONISM
	- note_randomize, générateur d'accents aléatoires sur un flux de notes midi
- Ecriture  sous forme de modules des fonctions basiques de PdRacks
	- PdRacks.presets	Gestion de présets à l'intérieur d'une scène
	- PdRacks.transport	Gestion de l'horloge et de la synchro
	- PdRacks.morphing	Curseur de morphing entre deux instantanés
(TODO : midi learn/mapping, sauvegarde de scènes, rappel automatique de préréglages interfaces audio/midi)

v 0.5.2

-Gestion de la session video sous forme de subprocess pd~

v 0.5.1
-les messages hasFocus sont générés dans la fenêtre de rack (cf [pd hasFocus]) et non plus dans le module_declare de chaque module.
-modification de module_loader et module_declare pour bien dissocier les fonctions. module_loader (vanilia) gère les numéros d'instance et les sauvegardes de présets, tandis que module_declare (iemguts/iemlib) gère le patchage "dynamique" sous forme de rack. 
(A terme, chaque module ne contiendra que module_loader, avec des inlets et des outlets, pour pouvoir être patchable directement comme n'importe quel objet pd. Un embeddeur (pour l'instant, l'objet pending/_.pd) le raccordera à des stereo_inlet~/outlet~ et ajoutera l'objet module_declare pour gérer l'utilisation sous forme de rack.)
-suppression de l'objet fx_vst (aka vst~) qui fait disparaitre les périphériques dans le menu media/asio, va savoir pourquoi.
-amélioration de la gestion de abl_link~ (mode reprise) dans le métronome global.
-abstraction core/morphing (idée à développer pour permettre le morphing de plusieurs parametres à partir d'un seul curseur général) 
-Ajout de modules : inst_bassdrum, inst_headrush

TO DO
	pouvoir définir le type de mesure dans le métronome.
	messages setFocus redondants - trouver l'erreur


v 0.5
-Abandon de la création/ destruction dynamique des modules.
-A la place, les modules sont déjà tous créés mais désactivés et parqués sur la droite 
-Nouvelle interface, avec pseudo explorateur d'objet sur la droite, pour un rappel à la volée des modules disponibles
-insertion, suppression, connexions dynamiques sous forme de rack
-Réécriture de la fonction midi-mapping avec un nouvel éditeur pour modifier les valeurs limites